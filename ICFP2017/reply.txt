We thank all the reviewers for their constructive comments.

Review A
===

- Missing comparison with Object Algebras.

A common advice on writing functional pearls is:

"no long lists of references and related work"
(in http://icfp06.cs.uchicago.edu/bird-talk.pdf)

We were following that advice!

However, we are happy to provide such comparison. Essentially our
technique and Object Algebras (OAs) can complement each other.  Our
technique is good at dealing with dependencies, but dependencies
create difficulties with OAs. A lot of the follow up work on OAs is
about novel (and more sophisticated) approaches to deal with
dependencies. For example, the paper:

Feature-Oriented Programming with Object Algebras
Bruno C. d. S. Oliveira, Tijs van der Storm, Alex Loh and William R. Cook
In 27th European Conference on Object-Oriented Programming (ECOOP 2013). July 2013

describes a generalization of OAs and corresponding combinators, which
can deal with dependencies.

On the other hand, as the reviewer mentions, OAs are good for solving
the problem of how to "define and type terms in the DSL independently
of a particular interpretation of the DSL". By combining our technique
with OAs we can address the limitation that the reviewer points out to
our approach, as shown next.


- if you support multiple interpretations, then how do I write DSL terms, without committing to a particular interpretation of the DSL?

There are different options to build terms:

1) An easy way that offers some weak form of modularity but not independent from multiple interpretations is to provide smart constructors of same signatures in different versions of DSLs. For example,

```
object Circuit1 {
  def fan(x: Int) = new Fan1 {val n=x}
  def beside(x: Circuit1, y: Circuit1) = new Beside1 {val c1=x; val c2=y}
  ...
}

object Circuit2 {
  def fan(x: Int) = new Fan2 {val n=x}
  def beside(x: Circuit2, y: Circuit2) = new Beside2 {val c1=x; val c2=y}
  ...
}
```

By switching import statements from `Circuit1` to `Circuit2`, we can have a circuit that supports different interpretations without its construction code being touched.


2) By building on the strength of OAs, we can have terms that are independent from interpretations.
Here is the Object Algebra interface for the circuit DSL:

```
trait CircuitFactory[C] {
  def fan(x: Int): C
  def beside(x: C, y: C): C
  ...
}
```

This interface can be used to construct interpretation-independent terms:

```
def mkCircuit[C](f: CircuitFactory[C]): C = f.beside(f.fan(2),f.fan(2))
```

Now, smart constructor definitions are moved into a concrete factory:

```
object Circuit1Factory extends CircuitFactory[Circuit1] {
  def fan(x: Int) = new Fan1 {val n=x}
  def beside(x: Circuit1, y: Circuit1) = new Beside1 {val c1=x; val c2=y}
  ...
}
```

Similar concrete factories can be defined for `Circuit2`.

```
object Circuit2Factory extends CircuitFactory[Circuit2] {
  def fan(x: Int) = new Fan2 {val n=x}
  def beside(x: Circuit2, y: Circuit2) = new Beside2 {val c1=x; val c2=y}
  ...
}
```

By supplying different concrete factories to `mkCircuit`, we obtain circuits independent of interpretations.

Review B
===


Review C
===

- "the paper doesn't acknowledge enough that the record/variant
duality"

We think we do ackowledge it, by talking about the Expression Problem
(which is essentially about such duality!). Perhaps we are taking for
granted that most readers are familiar with the Expression Problem. We
are happy to add a few explicit sentences about the duality, along the
same line of what the reviewer wrote.

- "Scala inheritance is used to save a tiny bit of redefinition"

This is an unfair view of the advantages.

* Firstly because it so happens that the code in the paper (for
obvious reasons) is minimalistic. More realistically we may have quite
a bit more code...

* Secondly, and more importantly, this misses the aspect of
  *modularity*. If we redefine, we do not get modularity, and have to
  deal with all the problems that copying&pasting code entails.

- I don't see any partial evaluation, and the implementation of joins is just nested loops, though the authors speculate about adding hash-based joins.

HashJoin is actually implemented but not shown in our paper (see https://github.com/wxzh/shallow-dsl/blob/master/src/sql/SQLExt.scala#L31).
Neither the original paper (https://www.cs.purdue.edu/homes/rompf/papers/rompf-icfp15.pdf) nor the companion code (https://github.com/scala-lms/tutorials/tree/master/src/test/scala/lms/tutorial, all versions prefixed by `query`)
contains any transformation.
The performance boost comes from the LMS framework and specialized data structures. Although our approach are still applicable to the staged versions,
they are out the scope of our paper.

- "I also feel like the authors are unjustifiably hard on GADTs as a
  way to deep-embed languages."

We don't see where in the paper we make such strong criticism. Can the
reviewer be concrete about specific sentences? In all *3 occurrences*
of "algebraic datatypes" in the paper we just mention the problems of
extensibility/modularity for datatypes, which the reviewer agrees
with. We agree that GADTs are great for *deep embeddings*, so
we are happy to rephrase any awkward sentences.

- acknowledging program transformation!

The fact that shallow embeddings cannot deal with transformations is
well-known. We do *not claim* that the OO technique for shallow embeddings 
can replace deep embeddings. We merely point out that *multiple
interpretations* are possible with OO techniques, which contradicts
the commonly acknowledged single interpretation limitation of shallow
embeddings. That is the main point of the pearl and the take home
message for DSL designers! 

- "The OOP style demonstrated here forces a linearization of the method
  signatures"

No. For example, `Circuit2` shown in page 6 can be defined separately:

```
trait Circuit2 {
  def depth: Int
}
trait Identity2 extends Circuit2 {
  val n: Int
  def depth = 0
}
...
```

We can merge `Circuit1` and `Circuit2` via multiple trait inheritance:

```
trait Circuit extends Circuit1 with Circuit2
trait Identity extends Circuit12 with Identity1 with Identity2
...
```

Appendix
===

Link (https://github.com/wxzh/shallow-dsl/blob/master/src/scans/ObjectAlgebras.scala)
```
object ObjectAlgebras extends App {
  // Code from page 4
  trait Circuit1 {
    def width: Int
  }
  trait Identity1 extends Circuit1 {
    val n: Int
    def width = n
  }
  trait Fan1 extends Circuit1 {
    val n: Int
    def width = n
  }
  trait Beside1 extends Circuit1 {
    val c1, c2: Circuit1
    def width = c1.width + c2.width
  }
  trait Above1 extends Circuit1 {
    val c1, c2: Circuit1
    def width = c1.width
  }
  trait Stretch1 extends Circuit1 {
    val ns: List[Int]
    val c: Circuit1
    def width = ns.sum
  }

  // Code from page 8-10
  type Layout = List[List[(Int,Int)]]
  trait Circuit4 extends Circuit1 {
    def tlayout(f: Int => Int): Layout
  }
  trait Identity4 extends Identity1 with Circuit4 {
    def tlayout(f: Int => Int) = List()
  }
  trait Fan4 extends Fan1 with Circuit4 {
    def tlayout(f: Int => Int) = List(for (i <- List.range(1,n)) yield (f(0),f(i)))
  }
  trait Above4 extends Above1 with Circuit4 {
    val c1, c2: Circuit4
    def tlayout(f: Int => Int) = c1.tlayout(f) ++ c2.tlayout(f)
  }
  trait Beside4 extends Beside1 with Circuit4 {
    val c1, c2: Circuit4
    def tlayout(f: Int => Int) = lzw (c1.tlayout(f), c2.tlayout(f.compose(c1.width + _))) (_ ++ _)
  }
  trait Stretch4 extends Stretch1 with Circuit4 {
    val c: Circuit4
    def tlayout(f: Int => Int) = {
      val vs = ns.scanLeft(0)(_ + _).tail
      c.tlayout(f.compose(vs(_) - 1))
    }
  }

  def lzw[A](xs: List[A], ys: List[A])(f: (A, A) => A): List[A] = (xs, ys) match {
    case (Nil,_)        =>  ys
    case (_,Nil)        =>  xs
    case (x::xs,y::ys)  =>  f(x,y) :: lzw (xs,ys) (f)
  }

  trait RStretch extends Stretch4 {
    override def tlayout(f: Int => Int) = {
      val vs = ns.scanLeft(ns.last - 1)(_ + _).init
      c.tlayout(f.compose(vs(_)))
    }
  }

  // An Object Algebra interface (abstract factory) describing the supported circuit constructors
  trait CircuitFactory[C] {
    def identity(x: Int): C
    def fan(x: Int): C
    def above(x: C, y: C): C
    def beside(x: C, y: C): C
    def stretch(x: C, xs: Int*): C
  }

  // Smart constructors defined for Circuit1 (page 5) are moved into an Object Algebra (concrete factory)
  class Circuit1Factory extends CircuitFactory[Circuit1] {
    def identity(x: Int)                  =  new Identity1  {val n=x}
    def fan(x: Int)                       =  new Fan1       {val n=x}
    def above(x: Circuit1, y: Circuit1)   =  new Above1     {val c1=x; val c2=y}
    def beside(x: Circuit1, y: Circuit1)  =  new Beside1    {val c1=x; val c2=y}
    def stretch(x: Circuit1, xs: Int*)    =  new Stretch1   {val ns=xs.toList; val c=x}
  }

  // Another Object Algebra that produces Circuit4
  class Circuit4Factory extends CircuitFactory[Circuit4] {
    def identity(x: Int)                  =  new Identity4  {val n=x}
    def fan(x: Int)                       =  new Fan4       {val n=x}
    def above(x: Circuit4, y: Circuit4)   =  new Above4     {val c1=x; val c2=y}
    def beside(x: Circuit4, y: Circuit4)  =  new Beside4    {val c1=x; val c2=y}
    def stretch(x: Circuit4, xs: Int*)    =  new Stretch4   {val ns=xs.toList; val c=x}
  }

  // An interpretation-independent circuit constructed via an abstract factory (page 5)
  def c[C](f: CircuitFactory[C]) =
    f.above(f.beside(f.fan(2),f.fan(2)),
            f.above(f.stretch(f.fan(2),2,2),
                    f.beside(f.beside(f.identity(1),f.fan(2)),f.identity(1))))

  // A neater alternative
  def c2[C](f: CircuitFactory[C]) = {
    import f._
    above(beside(fan(2),fan(2)),
            above(stretch(fan(2),2,2),
                    beside(beside(identity(1),fan(2)),identity(1))))
  }

  // Supplying concrete factories to allow different interpretations
  println(c(new Circuit1Factory).width) // 4
  println(c(new Circuit4Factory).tlayout { x => x }) // List(List((0,1), (2,3)), List((1,3)), List((1,2)))

  // Circuit constructor extension
  trait ExtCircuitFactory[C] extends CircuitFactory[C] {
    def rstretch(x: C, xs: Int*): C
  }
  class ExtCircuit4Factory extends Circuit4Factory {
    def rstretch(x: Circuit4, xs: Int*) = new RStretch {val c=x; val ns=xs.toList}
  }

  // Client code for extension
  def c3[C](f: ExtCircuit4Factory) = {
    import f._
    rstretch(c2(f),2,2,2,2)
  }
  println(c3(new ExtCircuit4Factory).tlayout { x => x }) // List(List((1,3), (5,7)), List((3,7)), List((3,5)))
}
```
